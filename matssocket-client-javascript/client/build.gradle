// MatsSocket-Client-JavaScript CLIENT LIBRARY

apply from: '../node.gradle'

/*
 * Runs Rollup - via Yarn - to create the different distributions:
 * 1. Native EcmaScript Modules (ESM) - just use the files directly
 * 2. Native EcmaScript Modules (EMS) - bundled
 * 3. Native EcmaScript Modules (EMS) - bundled, minified
 * 4. Universal Module Definition (UMD) - bundled ("by definition")
 * 5. Universal Module Definition (UMD) - bundled, minified
 *
 * Using this blog post as reference:
 * https://dev.to/remshams/rolling-up-a-multi-module-system-esm-cjs-compatible-npm-library-with-typescript-and-babel-3gjg
 */
tasks.register('build', YarnTask) {
    dependsOn yarn, jsdoc, archiveLib
    args = ['build']
    inputs.files('package.json', 'yarn.lock', 'rollup.config.js')
    inputs.dir('lib')
    outputs.dir('bundles')
}

tasks.register('jsdoc', YarnTask) {
    dependsOn yarn
    args = ['jsdoc']
    inputs.files('package.json', 'yarn.lock', 'rollup.config.js')
    inputs.dir('lib')
    outputs.dir('jsdoc')
}

tasks.register('publishDryRun', NpmTask) {
    dependsOn build
    args = ['publish', '--dry-run']
}

tasks.register('publishExperimental', NpmTask) {
    dependsOn build
    // Remember to update version in package.json, it shall read "0.0.0-experimental-<iso datetime>" (e.g. 2021-07-14T18-06)
    // TODO: Also update in clients and build.gradle files.
    args = ['publish', '--tag', 'experimental']
}

tasks.register('publish', NpmTask) {
    dependsOn build
    // Remember to update version in package.json, it shall read "x.y.z"
    // TODO: Also update in clients and build.gradle files.
    // 'publish' by default uses '--tag latest'
    args = ['publish']
}

// Run the integration test continuously, retriggering on change in the javascript code. This assumes there is
// a server listening on ws://localhost:8080/matssocket
tasks.register('javascriptTestWatch', YarnTask) {
    dependsOn yarn
    args = ['test', '--watch']
    workingDir = file('./tests')
}

// Package up the JavaScript library
tasks.register('archiveLib', Zip) {
    from "$projectDir/lib"
    into "matssocket-${project.version}-js"
    def destinationDir = layout.buildDirectory.dir("dist").get().asFile
    def archiveName = "matssocket-${project.version}-js.zip"
    println("JavaScript Client zip: " + destinationDir + "/" + archiveName)
    destinationDirectory = destinationDir
    archiveFileName = archiveName
}

tasks.register('clean', Delete) {
    delete layout.buildDirectory
    delete "$projectDir/bundles/"
    delete "$projectDir/jsdoc/"
}

// Clean out the downloaded node & yarn
tasks.register('distclean', Delete) {
    dependsOn clean
    delete "$projectDir/node_download/"
    delete "$projectDir/node_modules/"
}
