// MatsSocket-Client-JavaScript TESTS

apply from: '../node.gradle'

// Execute only the unit tests
tasks.register('testUnit', YarnTask) {
    dependsOn ':matssocket-client-javascript:client:build', 'yarn'
    args = ['testUnit']
}

// Execute only the basic tests
tasks.register('testBasic', YarnTask) {
    dependsOn 'cleanNodeModules', 'yarn', ':startMatsSocketTestServer'
    args = ['testBasic']
    doFirst {
        execOverrides {
            it.environment("MATS_SOCKET_URLS", rootProject.wsUrls.join(","))
        }
    }
}

// Execute both unit and integration tests against a test MatsSocketTestServer
tasks.register('test', YarnTask) {
    dependsOn 'cleanNodeModules', 'yarn', ':startMatsSocketTestServer'
    args = ['test']
    doFirst {
        execOverrides {
            it.environment("MATS_SOCKET_URLS", rootProject.wsUrls.join(","))
        }
    }
}

// Run the integration test continuously, retriggering on change in the javascript code. This assumes there is
// a server listening on ws://localhost:8080/matssocket
tasks.register('javascriptTestWatch', YarnTask) {
    dependsOn 'cleanNodeModules', 'yarn', ':startMatsSocketTestServer'
    args = ['test', '--watch']
    doFirst {
        execOverrides {
            it.environment("MATS_SOCKET_URLS", rootProject.wsUrls.join(","))
        }
    }
}

// We need to ensure that javascript tests are run before MatsSocketTestServer stops!
rootProject.stopMatsSocketTestServer.mustRunAfter(test)
rootProject.stopMatsSocketTestServer.mustRunAfter(testBasic)

tasks.register('cleanNodeModules', Delete) {
    delete "$projectDir/node_modules/"
}

tasks.register('clean', Delete) {
    delete layout.buildDirectory
    delete "$projectDir/bundles/"
}

// Clean out the downloaded node & yarn
tasks.register('distclean', Delete) {
    dependsOn clean, cleanNodeModules
    delete "$projectDir/node_download/"
}
