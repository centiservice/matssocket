// MatsSocket-Client-JavaScript

apply plugin: 'com.github.node-gradle.node'

node {
    // Version of node to use.
    version = '14.17.1'

    // Version of Yarn to use.
    yarnVersion = '1.21.1'

    // Download node rather than using global
    download = true

    nodeModulesDir = file(projectDir)

    // Set the work directories
    workDir = file("$projectDir/node_download/nodejs")
    npmWorkDir = file("$projectDir/node_download/npm")
    yarnWorkDir = file("$projectDir/node_download/yarn")
}

// :: Versions of node tools
task nodeVersion(type: NodeTask) {
    script = file('./dummy.js')
    options = ['--version']
}
task versions(dependsOn: [nodeVersion, npm_version, yarn_version]) {
}


/*
 * Runs Rollup - via Yarn - to create the different distributions:
 * 1. Native EcmaScript Modules (ESM) - just use the files directly
 * 2. Native EcmaScript Modules (EMS) - bundled
 * 3. Native EcmaScript Modules (EMS) - bundled, minified
 * 4. Universal Module Definition (UMD) - bundled ("by definition")
 * 5. Universal Module Definition (UMD) - bundled, minified
 *
 * Using this blog post as reference:
 * https://dev.to/remshams/rolling-up-a-multi-module-system-esm-cjs-compatible-npm-library-with-typescript-and-babel-3gjg
 */
task build(type: YarnTask, dependsOn: yarn) {
    args = ['build']
}

// Execute only the unit tests
task testUnit(type: YarnTask, dependsOn: build) {
    args = ['testUnit']
}

// Execute only the basic tests
task testBasic(type: YarnTask, dependsOn: [yarn, build, ':startMatsSocketTestServer']) {
    args = ['testBasic']
    doFirst {
        execOverrides {
            it.environment("MATS_SOCKET_URLS", rootProject.startMatsSocketTestServer.wsUrls.join(","))
        }
    }
}

// Execute the both unit and integration tests against a test MatsSocketTestServer
task test(type: YarnTask, dependsOn: [yarn, build, ':startMatsSocketTestServer']) {
    args = ['test']
    doFirst {
        execOverrides {
            it.environment("MATS_SOCKET_URLS", rootProject.startMatsSocketTestServer.wsUrls.join(","))
        }
    }
}

// We need to ensure that javascript tests are run before stop
rootProject.stopMatsSocketTestServer.mustRunAfter(test)
rootProject.stopMatsSocketTestServer.mustRunAfter(testBasic)

// Run the integration test continuously, retriggering on change in the javascript code. This assumes there is
// a server listening on ws://localhost:8080/matssocket
task javascriptTestWatch(type: YarnTask, dependsOn: yarn) {
    args = ['test', '--watch']
}

// Package up the JavaScript library
task archiveLib(type: Zip) {
    from "$projectDir/lib"
    into "mats_socket-${project.version}-js"
    archiveFileName = "mats_socket-${project.version}-js.zip"
    destinationDirectory = file("$buildDir/dist")
}

// Include the packaging of the lib into the main build
rootProject.build.dependsOn(archiveLib)

task clean(type: Delete) {
    delete buildDir
    delete "$projectDir/bundles/"
}

// Clean out the downloaded node & yarn
task distclean(type: Delete, dependsOn: [clean]) {
    delete "$projectDir/node_download/"
    delete "$projectDir/node_modules/"
}
