// MatsSocket-Client-JavaScript TESTS

apply from: '../node.gradle'

// Avoid circular dependency
tasks.register('build') { dependsOn build_internal, test }

tasks.register('build_internal', NpmTask) {
    dependsOn npmInstall, ':matssocket-client-javascript:client:build'
    args = ['run', 'build']
    inputs.files('package.json', 'package-lock.json', 'rollup.config.js')
    inputs.dir('src')
    outputs.dir('bundle')
}

// Execute all tests
tasks.register('testJs') {
    dependsOn testRaw, testEsm, testUmd
}
// Alias 'test' for 'testJs' so that it is part of the standard Gradle lifecycle
tasks.register('test') {dependsOn testJs }


// Execute test:raw - only need direct access to both client and tests files, plus deps (chai and ws).
tasks.register('testRaw', NpmTask) {
    usesService(rootProject.sharedParamsService)
    dependsOn npmInstall, ':startMatsSocketTestServer'  // Note: Don't need no building of lib nor test bundles.
    def sharedParamsService =  rootProject.sharedParamsService;
    args = ['run', 'test:raw']
    doFirst {
        def matsSocketUrls = sharedParamsService.get().matsSocketUris.get().join(',')
        execOverrides {
            it.environment("MATS_SOCKET_URLS", matsSocketUrls)
        }
    }
}

// Execute test:umd
tasks.register('testUmd', NpmTask) {
    usesService(rootProject.sharedParamsService)
    dependsOn npmInstall, 'build_internal', ':startMatsSocketTestServer'
    def sharedParamsService =  rootProject.sharedParamsService;
    args = ['run', 'test:umd']
    doFirst {
        def matsSocketUrls = sharedParamsService.get().matsSocketUris.get().join(',')
        execOverrides {
            it.environment("MATS_SOCKET_URLS", matsSocketUrls)
        }
    }
}

// Execute test:esm
tasks.register('testEsm', NpmTask) {
    usesService(rootProject.sharedParamsService)
    dependsOn npmInstall, 'build_internal', ':startMatsSocketTestServer'
    def sharedParamsService =  rootProject.sharedParamsService;
    args = ['run', 'test:esm']
    doFirst {
        def matsSocketUrls = sharedParamsService.get().matsSocketUris.get().join(',')
        execOverrides {
            it.environment("MATS_SOCKET_URLS", matsSocketUrls)
        }
    }
}

tasks.register('download') {
    dependsOn nodeBinDir
}

tasks.register('downloadAll') {
    dependsOn download, npmInstall
}

// Run the integration test continuously, retriggering on change in the javascript code. This assumes there is
// a server listening on ws://localhost:8080/matssocket
tasks.register('javascriptTestWatch', NpmTask) {
    dependsOn npmInstall, ':startMatsSocketTestServer'
    args = ['test', '--watch']
    doFirst {
        execOverrides {
            it.environment("MATS_SOCKET_URLS", rootProject.wsUrls.join(","))
        }
    }
}

// We need to ensure that javascript tests are run before MatsSocketTestServer stops!
rootProject.stopMatsSocketTestServer.mustRunAfter(test)
rootProject.stopMatsSocketTestServer.mustRunAfter(testRaw)
rootProject.stopMatsSocketTestServer.mustRunAfter(testUmd)
rootProject.stopMatsSocketTestServer.mustRunAfter(testEsm)

tasks.register('clean', Delete) {
    delete layout.buildDirectory
}

tasks.register('distclean', Delete) {
    dependsOn clean, distcleanNode
    delete "$projectDir/bundle/"
}
