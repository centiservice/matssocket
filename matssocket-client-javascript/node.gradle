apply plugin: 'com.github.node-gradle.node'

node {
    // Version of node to use.
    version = "$nodeVersion"

    // Download node rather than using global
    download = true

    // Set the work directories
    workDir = file("$projectDir/node_download/nodejs")
    npmWorkDir = file("$projectDir/node_download/npm")
}


// ensure Node is installed
tasks.register('nodeBinDir') {
    dependsOn tasks.named('nodeSetup')
    String nodeBinDir = "${node.resolvedNodeDir.get()}${org.gradle.internal.os.OperatingSystem.current().isWindows() ? '\\' : '/bin'}"
    doLast {
        println "=== Node.js bin dir: $nodeBinDir"
        println "    Unix:     export PATH=${nodeBinDir}:\$PATH"
        println "    Windows:  set PATH=${nodeBinDir};%PATH%"
    }
}

// :: Cleaning tasks - must reside above those that depends on it..

// Delete package-lock.json
tasks.register('deletePackageLock', Delete) {
    delete "$projectDir/package-lock.json"
}

// Delete node_modules
tasks.register('deleteNodeModules', Delete) {
    delete "$projectDir/node_modules/"
}

// Clean out the downloaded node and modules
tasks.register('distcleanNode', Delete) {
    dependsOn clean, deletePackageLock, deleteNodeModules
    delete "$projectDir/node_download/"
}

// :: Tasks only relevant if 'package.json' is present (not for Dart!)

if (file("$projectDir/package.json").exists()) {

    // :: Update npm dependencies tasks

    // 'npm update' to update dependencies to the latest version specified in package.json
    tasks.register('npmUpdate', NpmTask) {
        args = ['update']
    }
    // 'npm update' to download deps - after deleting them all.
    tasks.register('npmCleanUpdate') {
        dependsOn deletePackageLock, deleteNodeModules, npmUpdate
    }
    npmCleanUpdate.mustRunAfter deletePackageLock
    npmCleanUpdate.mustRunAfter deleteNodeModules

    // :: Check uppdate and audit tasks.

    tasks.register('npmCheckUpdates', NpxTask) {
        command = 'npm-check-updates@latest'
    }

    // 'npmCheckUpdatesUpdate' to force update of all deps, ignore specified versions in package.json.
    tasks.register('npmCheckUpdatesUpdate_internal', NpxTask) {
        command = 'npm-check-updates@latest'
        args = ['-u']
    }
    tasks.register('npmCheckUpdatesUpdate') { dependsOn npmCheckUpdatesUpdate_internal, npmUpdate }
    npmUpdate.mustRunAfter npmCheckUpdatesUpdate_internal

    tasks.register('npmAudit', NpmTask) {
        dependsOn npmInstall
        args = ['audit']
    }
}