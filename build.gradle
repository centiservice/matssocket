// MatsSocket

import java.nio.charset.StandardCharsets
import java.time.LocalDateTime

// mats-websockets
plugins {
    id 'com.github.node-gradle.node' version '3.1.0'
    id 'java-library'
    id 'signing'
    id 'maven-publish'
}

// Specify Gradle version, run update by './gradlew wrapper'
wrapper {
    gradleVersion = "7.5.1"
    // Use "-all"-version of distribution, since IntelliJ works better then..
    setDistributionType(Wrapper.DistributionType.ALL)
}

allprojects {
    group = 'io.mats3.matssocket'
    version = '0.18.0-2021-09-20'
    buildDir = 'gradlebuild'
}

// Versions for all libraries used throughout the subprojects
ext {
    // MatsSocketServer API dependencies
    matsVersion = '0.19.0-2022-11-05'
    // MatsSocketServer Implementation dependencies
    javaxWebsocketsVersion = '1.0'
    jacksonVersion = '2.13.4'
    slf4jVersion = '1.7.36'

    // optional for DB setup/migration
    flywayVersion = '9.7.0'

    // For testing
    logbackVersion = '1.2.11'
    h2Version = '2.1.214'
    jettyVersion = '9.4.49.v20220914'
}

configure ([project('matssocket-server-api'), project('matssocket-server-impl')]) {
    apply plugin: 'java-library'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'

    repositories { mavenCentral() }

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    compileJava {
        options.encoding = 'UTF-8'
        options.deprecation = true
        options.incremental = true
        options.compilerArgs += ['-Werror', '-Xlint:all', '-Xlint:-serial']
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    javadoc {
        // without the -quiet option, the build fails due to errors&warns
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    jar {
        manifest {
            attributes 'Implementation-Title': 'MatsSocket',
                    'Implementation-Version': archiveVersion
        }
    }

    test {
        /*
         * All tests employ MatsTestBroker to get hold of a JMS ConnectionFactory to use for its MatsFactory creation.
         * This per default starts an in-vm ActiveMQ broker, and connects an ActiveMQConnectionFactory to this.
         * However, via system properties, you may choose which client to use (activemq, artemis or rabbitmq - and
         * you may also specify the class name of a MatsTestBroker implementation).
         * For ActiveMQ and Artemis, it supports in-vm creation of the broker (server) - which is the default.
         *
         * Run all tests with in-vm ActiveMQ brokers (ActiveMQ is default, in-vm is default)
         * ./gradlew clean test
         *
         * Run all tests with in-vm Artemis MQ brokers (Apache ActiveMQ Artemis, formerly JBoss HornetQ,
         * and what Red Hat AMQ is based upon):
         * ./gradlew -Pmats.test.broker=artemis clean test
         *
         * Run all tests against an external ActiveMQ MQ broker on localhost (ActiveMQ is default).
         * ./gradlew -Pmats.test.brokerurl=localhost clean test
         *
         * Run all tests against an external Artemis MQ broker on localhost:
         * ./gradlew -Pmats.test.broker=artemis -Pmats.test.brokerurl=localhost clean test
         */
        // NOTICE: Currently no Java tests. These properties are also forwarded to the MatsSocketTestServer exec below.
        systemProperties project.properties.subMap(["mats.test.brokerurl", "mats.test.broker"])
    }

    signing {
        // "configurations.archives" didn't sign anything, while this even signs the MDS5s and SHAs..
        sign publishing.publications
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                pom {
                    name = 'MatsSockets'
                    description = 'WebSocket-based server and client libs for asynchronous, bidirectional interaction with Mats3 from end-user clients'
                    url = 'https://github.com/centiservice/mats3'
                    licenses {
                        license {
                            name = 'PolyForm Perimeter License 1.0.0 with examples'
                            url = 'https://github.com/centiservice/matssocket/blob/main/LICENSE.md'
                        }
                    }
                    developers {
                        developer {
                            id = 'stolsvik'
                            name = 'Endre St√∏lsvik'
                            email = 'endre@stolsvik.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:https://github.com/centiservice/matssocket.git'
                        developerConnection = 'scm:git:ssh://github.com:centiservice/matssocket.git'
                        url = 'https://github.com/centiservice/matssocket'
                    }
                }
                from components.java
            }
        }
        repositories {
            maven {
                name 'SonatypeOSSRHSnapshot'
                url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                credentials {
                    // using findProperty(..) to be able to build without it being defined.
                    username findProperty('sonatypeUsername') as String ?: "should be in different file"
                    password findProperty('sonatypePassword') as String ?: "should be in different file"
                }
            }
            maven {
                name 'SonatypeOSSRHStaging'
                url 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2'
                credentials {
                    // using findProperty(..) to be able to build without it being defined.
                    username findProperty('sonatypeUsername') as String ?: "should be in different file"
                    password findProperty('sonatypePassword') as String ?: "should be in different file"
                }
            }
        }
    }

    // Tasks to publish to Sonatype's OSSRH (OSS Repository Hosting), Snapshot and Staging
    task matssocketPublishSnapshot(dependsOn: [publishAllPublicationsToSonatypeOSSRHSnapshotRepository])
    task matssocketPublishStaging(dependsOn: [publishAllPublicationsToSonatypeOSSRHStagingRepository])

    // Define dependency report task that the Java subprojects gets. Invoke with "./gradlew allDeps | less"
    task allDeps(type: DependencyReportTask) {}

}

// Task to start a MatsSocketTestServer for integration tests. We will monitor the log until we get the expected number
// of ws urls, that other tasks can then depend on
task startMatsSocketTestServer(dependsOn: [configurations.testRuntimeClasspath, 'matssocket-server-impl:compileTestJava', 'matssocket-server-impl:processTestResources']) {
    ext {
        wsUrls = []
    }

    doLast {
        int numberOfServers = 3
        String serverClassname = "io.mats3.matssocket.MatsSocketTestServer"
        logger.info("Starting MatsSocketTestServer");

        // :: Create cmd-line for MatsSocketTestServer Java-process to execute
        List<String> cmd = ["${System.getenv("JAVA_HOME")}/bin/java"]
        // Add the MatsTestBroker -P properties from Gradle-invocation as -D properties to the JVM, if set
        project.properties.subMap(["mats.test.brokerurl", "mats.test.broker"]).each {k, v -> cmd << "-D$k=$v"}
        // Add classpath, from test's runtimeClasspath for both server-api and server-impl projects
        cmd << "-classpath" << (project(':matssocket-server-api').sourceSets.test.runtimeClasspath)
                        .plus((project(':matssocket-server-impl').sourceSets.test.runtimeClasspath)).asPath
        // The classname to execute, with argument which is the number of servers to start
        cmd << serverClassname << numberOfServers.toString()
        // Execute!
        Process server = cmd.execute()

        // Keep a log file of the server output
        File logFile = new File("$buildDir/logs/matsSocketServer-${LocalDateTime.now().withNano(0)}.log".replace(':', '.'))
        logFile.parentFile.mkdirs();

        // :: Find the WebSocket URLs from the output, via magic hook-line in log output
        Reader reader = new InputStreamReader(server.inputStream, StandardCharsets.UTF_8)
        logFile.withWriterAppend { out ->
            String line;
            while (wsUrls.size < numberOfServers && (line = reader.readLine()) != null) {
                out.writeLine(line)
                logger.info("TestServer: $line")
                if (line.contains('HOOK_FOR_GRADLE_WEBSOCKET_URL')) {
                    int urlStart = line.indexOf("#[")
                    int urlEnd = line.indexOf("]#")
                    if (urlStart > -1 && urlEnd > urlStart) {
                        String url = line.substring(urlStart + 2, urlEnd)
                        wsUrls.add(url)
                        logger.info("!! Registering WS URL: $url");
                    }
                }
            }
        }
        if (wsUrls.isEmpty()) {
            server.errorStream.eachLine { logger.error(it) }
            logger.error("Failed to execute: [${cmd.join(" ")}]")
            throw new GradleException("Failed to start $serverClassname, check log above for command.")
        }
        println "MatsSocketTestServer started"
        logger.info "$serverClassname started"

        // Fork a new thread to just keep reading and logging the MatsSocketTestServer
        // Notice: It will exit once the process exits, as the reader will then be done.
        new Thread({
            logFile.withWriterAppend { out ->
                reader.eachLine { line ->
                    out.writeLine(line)
                }
            }
            println "MatsSocketTestServer: std.out -> logfile thread exiting, logfile: ${logFile.path}"
        }, "MatsSocketTestServer-logprinter").start()
    }
}

// Stop the MatsSocketTestServer, this is done by inspecting the wsUrls field on the start task,
// and creating a url to the shutdown page based on the first websocket url. The shutdown page is
// a servlet that will do System.exit(0) to shutdown the server.
task stopMatsSocketTestServer(dependsOn: startMatsSocketTestServer) {
    doLast {
        String shutdownUrl = startMatsSocketTestServer.wsUrls[0]
                .replace("ws://", "http://")
                .replace("/matssocket", "/shutdown");
        logger.info("Shutting down MatsSocketTestServer by invoking '$shutdownUrl")
        String response = new URL(shutdownUrl).text
        logger.info("Response: [${response.trim()}]")
        println "MatsSocketTestServer shut down"
        Thread.sleep(500)
    }
}

// Make sure that the startMatsSocketTestServer is finalized and shut down.
startMatsSocketTestServer.finalizedBy(stopMatsSocketTestServer)

// ------------------------------------------------
// -- Simple tools

task systemInformation {
    doLast {
        println "\n** Java properties [System.getProperties()], sorted:\n"
        System.properties.sort().each { k, v ->
            println("$k = $v")
        }
        println "\n** Environment [System.getenv()], sorted:\n"
        System.env.sort().each { k, v ->
            println("$k = $v")
        }
        println ''
        println "** Java Version:   " + System.getProperty("java.version")
        println "** Groovy Version: " + GroovySystem.getVersion()
        println "** Gradle Version: " + gradle.gradleVersion
    }
}

