// MatsSocket

import java.nio.charset.StandardCharsets
import java.time.LocalDateTime
import org.gradle.internal.jvm.Jvm

// mats-websockets
plugins {
    id 'com.github.node-gradle.node' version '3.1.0'
    id 'java-library'
    id 'signing'
    id 'maven-publish'
}

// Specify Gradle version, run update by './gradlew wrapper'
wrapper {
    gradleVersion = "8.14.3"
    // Use "-all"-version of distribution, since IntelliJ works better then..
    setDistributionType(Wrapper.DistributionType.ALL)
}

// Versions for all libraries used throughout the subprojects
ext {
    // MatsSocketServer API dependencies
    matsVersion = '1.0.0+2025-05-17'
    // MatsSocketServer Implementation dependencies
    javaxWebsocketsVersion = '1.0'
    jacksonVersion = '2.17.2'
    slf4jVersion = '2.0.16'

    // optional for DB setup/migration
    flywayVersion = '9.7.0'

    // For testing
    logbackVersion = '1.5.8'
    h2Version = '2.3.232'
    jettyVersion = '9.4.56.v20240826'

    // .. full path for the JMS lib
    jmsApiDependency = 'jakarta.jms:jakarta.jms-api:2.0.3'
}

// :: Find which Java version to use for the toolchain.
int javaVersion = 11;
if (project.properties.containsKey('mats.build.java_version')) {
    javaVersion = Integer.parseInt((String) project.properties['mats.build.java_version'])
    println "Specified Java version for toolchain, using Java version: $javaVersion"
}

// Common config for all projects
allprojects {
    group = 'io.mats3.matssocket'
    version = '0.19.0-2022-11-11'
    layout.buildDirectory.set(file('build-gradle'))
}

// Common config for the two Java subprojects
configure([project('matssocket-server-api'), project('matssocket-server-impl')]) {
    apply plugin: 'java-library'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'

    repositories { mavenCentral() }

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11

        toolchain {
            languageVersion.set(JavaLanguageVersion.of(javaVersion))
        }
        withJavadocJar()
        withSourcesJar()
    }

    compileJava {
        options.encoding = 'UTF-8'
        options.deprecation = true
        options.incremental = true
        options.compilerArgs += ['-Werror', '-Xlint:all', '-Xlint:-serial']
    }

    javadoc {
        // without the -quiet option, the build fails due to errors&warns
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    jar {
        manifest {
            attributes 'Implementation-Title': 'MatsSocket',
                    'Implementation-Version': archiveVersion
        }
    }

    test {
        /*
         * All tests employ MatsTestBroker to get hold of a JMS ConnectionFactory to use for its MatsFactory creation.
         * This per default starts an in-vm ActiveMQ broker, and connects an ActiveMQConnectionFactory to this.
         * However, via system properties, you may choose which client to use (activemq, artemis or rabbitmq - and
         * you may also specify the class name of a MatsTestBroker implementation).
         * For ActiveMQ and Artemis, it supports in-vm creation of the broker (server) - which is the default.
         *
         * Run all tests with in-vm ActiveMQ brokers (ActiveMQ is default, in-vm is default)
         * ./gradlew clean test
         *
         * Run all tests with in-vm Artemis MQ brokers (Apache ActiveMQ Artemis, formerly JBoss HornetQ,
         * and what Red Hat AMQ is based upon):
         * ./gradlew -Pmats.test.broker=artemis clean test
         *
         * Run all tests against an external ActiveMQ MQ broker on localhost (ActiveMQ is default).
         * ./gradlew -Pmats.test.brokerurl=localhost clean test
         *
         * Run all tests against an external Artemis MQ broker on localhost:
         * ./gradlew -Pmats.test.broker=artemis -Pmats.test.brokerurl=localhost clean test
         */
        // NOTICE: Currently no Java tests. These properties are also forwarded to the MatsSocketTestServer exec below.
        systemProperties project.properties.subMap(["mats.test.brokerurl", "mats.test.broker"])

        testLogging {
            exceptionFormat = 'full'
        }
    }

    signing {
        // "configurations.archives" didn't sign anything, while this even signs the MDS5s and SHAs..
        sign publishing.publications
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                pom {
                    name = 'MatsSockets'
                    description = 'WebSocket-based server and client libs for asynchronous, bidirectional interaction with Mats3 from end-user clients'
                    url = 'https://github.com/centiservice/mats3'
                    licenses {
                        license {
                            name = 'Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'stolsvik'
                            name = 'Endre StÃ¸lsvik'
                            email = 'endre@stolsvik.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:https://github.com/centiservice/matssocket.git'
                        developerConnection = 'scm:git:ssh://github.com:centiservice/matssocket.git'
                        url = 'https://github.com/centiservice/matssocket'
                    }
                }
                from components.java
            }
        }
        repositories {
            maven {
                name = 'SonatypeOSSRHSnapshot'
                url = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                credentials {
                    // using findProperty(..) to be able to build without it being defined.
                    username = findProperty('sonatypeUsername') as String ?: "should be in different file"
                    password = findProperty('sonatypePassword') as String ?: "should be in different file"
                }
            }
            maven {
                name = 'SonatypeOSSRHStaging'
                url = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2'
                credentials {
                    // using findProperty(..) to be able to build without it being defined.
                    username = findProperty('sonatypeUsername') as String ?: "should be in different file"
                    password = findProperty('sonatypePassword') as String ?: "should be in different file"
                }
            }
        }
    }

    // Tasks to publish to Sonatype's OSSRH (OSS Repository Hosting), Snapshot and Staging
    tasks.register('matssocketPublishSnapshot') { dependsOn[publishAllPublicationsToSonatypeOSSRHSnapshotRepository] }
    tasks.register('matssocketPublishStaging') { dependsOn[publishAllPublicationsToSonatypeOSSRHStagingRepository] }

    // Define dependency report task that the Java subprojects gets. Invoke with "./gradlew allDeps | less"
    tasks.register('allDeps', DependencyReportTask) {}
}

// For "all JavaDoc" task, sweeping together all sources to make a complete set of JavaDoc in one go.
// - Adapted from https://coderwall.com/p/evtdbw/aggregate-javadoc-in-multiproject-gradle-builds
apply plugin: 'java'
tasks.register('alljavadoc', Javadoc) {
    def relevantProjects = subprojects.findAll { it.name != 'mats-api-test' }
    source relevantProjects.collect { it.sourceSets.main.allJava }
    classpath = files(relevantProjects.collect { it.sourceSets.main.compileClasspath })
    destinationDir = file("${buildDir}/docs/javadoc")
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('--frames')
}
// .. ensure 'alljavadoc' is run together with './gradlew clean javadoc', thus building 'all' + submodules.
javadoc.dependsOn alljavadoc

// Task to start a MatsSocketTestServer. We will monitor the log until we get the expected number
// of ws urls, that other tasks can then depend on
tasks.register('startMatsSocketTestServer_internal') {
    dependsOn configurations.testRuntimeClasspath, 'matssocket-server-impl:compileTestJava', 'matssocket-server-impl:processTestResources'

    // Precompute values at configuration time to avoid accessing Task.project during execution
    def matsSystemProps = ['mats.test.brokerurl', 'mats.test.broker']
            .collect { key ->
                def v = providers.gradleProperty(key).orNull
                v ? "-D${key}=${v}" : null
            }
            .findAll { it != null }

    def serverClasspath = files(
            project(':matssocket-server-api').sourceSets.test.runtimeClasspath,
            project(':matssocket-server-impl').sourceSets.test.runtimeClasspath
    )

    doLast {
        int numberOfServers = 3
        logger.info("Starting MatsSocketTestServer");

        // :: Create cmd-line for MatsSocketTestServer Java-process to execute
        def javaExe = Jvm.current().javaExecutable.absolutePath

        println "MatsSocketTestServer: Using Java executable: $javaExe"

        List<String> cmd = [javaExe]
        // Add the MatsTestBroker -P properties as -D properties to the JVM, if set (precomputed above)
        cmd.addAll(matsSystemProps)
        // Add classpath, from test's runtimeClasspath for both server-api and server-impl projects (precomputed above)
        cmd << "-classpath" << serverClasspath.asPath
        // The classname to execute, with argument which is the number of servers to start
        cmd << matsSocketTestServerClassname << numberOfServers.toString()

        // Execute!
        // println "MatsSocketTestServer: Executing: ${cmd.join(" ")}" // Verbose due to classpath
        Process server = cmd.execute()

        // Keep a log file of the server output
        logFile = new File("${layout.buildDirectory.get().asFile}/logs/matsSocketServer-${LocalDateTime.now().withNano(0)}.log".replace(':', '.'))
        println "MatsSocketTestServer: Logging to ${logFile.path}"
        logFile.parentFile.mkdirs();

        // :: Find the WebSocket URLs from the output, via magic hook-line in log output
        Reader reader = new InputStreamReader(server.inputStream, StandardCharsets.UTF_8)
        logFile.withWriterAppend { out ->
            String line;
            while (wsUrls.size < numberOfServers && (line = reader.readLine()) != null) {
                out.writeLine(line)
                logger.info("TestServer: $line")
                if (line.contains('HOOK_FOR_GRADLE_WEBSOCKET_URL')) {
                    int urlStart = line.indexOf("#[")
                    int urlEnd = line.indexOf("]#")
                    if (urlStart > -1 && urlEnd > urlStart) {
                        String url = line.substring(urlStart + 2, urlEnd)
                        wsUrls.add(url)
                        logger.info("!! Registering WS URL: $url");
                    }
                }
            }
        }
        if (wsUrls.isEmpty()) {
            server.errorStream.eachLine { logger.error(it) }
            logger.error("Failed to execute: [${cmd.join(" ")}]")
            throw new GradleException("Failed to start $matsSocketTestServerClassname, check log above for command.")
        }
        println "MatsSocketTestServer: Started, WebSocket URLs: ${wsUrls}"
        logger.info "$matsSocketTestServerClassname started, WebSocket URLs: ${wsUrls}"

        // Fork a new thread to just keep reading and logging the MatsSocketTestServer
        // Notice: It will exit once the process exits, as the reader will then be done.
        new Thread({
            logFile.withWriterAppend { out ->
                reader.eachLine { line ->
                    out.writeLine(line)
                }
            }
            println "MatsSocketTestServer: std.out -> logfile thread exiting, logfile: ${logFile.path}"
        }, "MatsSocketTestServer-logprinter").start()
    }
}
ext {
    matsSocketTestServerClassname = "io.mats3.matssocket.MatsSocketTestServer"
    wsUrls = []
    logFile = null
}

// Task for starting the MatsSocketTestServer and keeping it alive - so that it can be accessed and used from command
// line tests etc.
tasks.register('matsSocketTestServer') {
    dependsOn 'startMatsSocketTestServer_internal'
    doLast {
        println ''
        println "MatsSocketTestServer is running!  (class: ${matsSocketTestServerClassname})"
        println ''
        println "HTTP URLs:       " + wsUrls.collect { it.replace("ws://", "http://").replace("/matssocket", "") }
        println "MatsSocket URLs: ${wsUrls}"
        println 'Logfile:         ' + (logFile != null ? logFile.path : "Unknown")
        println ''
        println '  #####################################################################'
        println '  ### PRESS [Enter] IN THIS TERMINAL WINDOW TO TERMINATE THE SERVER ###'
        println '  #####################################################################'
        println ''
        try {
            System.in.withReader { it.readLine() }
        } catch (ignore) {
            // no-op
        }
        println 'Stopping MatsSocketTestServer...'
    }
}

// Task to start a MatsSocketTestServer for integration tests in gradle, that will be stopped when the build is done.
tasks.register('startMatsSocketTestServer') {
    dependsOn 'startMatsSocketTestServer_internal'
}

// Stop the MatsSocketTestServer, this is done by inspecting the wsUrls field on the start task,
// and creating a url to the shutdown page based on the first websocket url. The shutdown page is
// a servlet that will do System.exit(0) to shutdown the server.
tasks.register('stopMatsSocketTestServer') {
    dependsOn startMatsSocketTestServer
    doLast {
        String shutdownUrl = wsUrls[0]
                .replace("ws://", "http://")
                .replace("/matssocket", "/shutdown");
        logger.info("Shutting down MatsSocketTestServer by invoking '$shutdownUrl")
        String response = new URL(shutdownUrl).text
        logger.info("Response: [${response.trim()}]")
        println "MatsSocketTestServer shut down"
        Thread.sleep(500)
    }
}

// Make sure that the startMatsSocketTestServer is finalized and shut down.
startMatsSocketTestServer.finalizedBy(stopMatsSocketTestServer)
matsSocketTestServer.finalizedBy(stopMatsSocketTestServer)

// ------------------------------------------------
// -- Simple tools

tasks.register('systemInformation') {
    doLast {
        println "\n** Java properties [System.getProperties()], sorted:\n"
        System.properties.sort().each { k, v ->
            println("$k = $v")
        }
        println "\n** Environment [System.getenv()], sorted:\n"
        System.env.sort().each { k, v ->
            println("$k = $v")
        }
        println ''
        println "** Java Version:   " + System.getProperty("java.version")
        println "** Groovy Version: " + GroovySystem.getVersion()
        println "** Gradle Version: " + gradle.gradleVersion
    }
}

