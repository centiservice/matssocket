// MatsSocket-Client-Dart

repositories {
    // Create a custom ivy repository that represents the dart sdk download, so that we
    // can download the SDK using gradles download mechanisms and cache.
    ivy {
        url "https://storage.googleapis.com/dart-archive/channels/stable/release/"
        patternLayout {
            artifact "[revision]/sdk/[artifact]-[classifier]-release.[ext]"
        }
        metadataSources {
            artifact()
        }
    }
}

configurations {
    dartSdk
}

ext {
    dartSdkVersion = '3.8.1'
    dartSdkPath = file("$projectDir/dartsdk_download/dart-sdk")
}

dependencies {
    def os = org.gradle.internal.os.OperatingSystem.current();
    if (os.isWindows()) {
        dartSdk "com.google.dart:dartsdk:${dartSdkVersion}:windows-x64@zip"
    }
    else if (os.isMacOsX()) {
        dartSdk "com.google.dart:dartsdk:${dartSdkVersion}:macos-x64@zip"
    }
    else if (os.isLinux()) {
        dartSdk "com.google.dart:dartsdk:${dartSdkVersion}:linux-x64@zip"
    }
}

task updateDartDependencies() {
    doLast {
        // Fetch the Dart SDK from "custom ivy repo" set up above
        copy {
            from zipTree(configurations.dartSdk.asPath)
            into "$projectDir/dartsdk_download"
        }

        // Update dart dependencies by executing 'pub get'
        exec {
            def os = org.gradle.internal.os.OperatingSystem.current();
            executable os.getScriptName("$dartSdkPath/bin/dart")
            workingDir projectDir
            args = ['pub', 'get']
        }
    }
}

task test(dependsOn: ['updateDartDependencies', ':startMatsSocketTestServer']) {
    doLast {
        exec {
            def os = org.gradle.internal.os.OperatingSystem.current();
            executable os.getScriptName("$dartSdkPath/bin/dart")
            workingDir projectDir
            environment("MATS_SOCKET_URLS", rootProject.startMatsSocketTestServer.wsUrls.join(","))

            // logging.level returns null, so we need to check which log level is enabled to pass
            // on to the tests, so that they log if needed.
            if (logger.isEnabled(LogLevel.DEBUG)) {
                environment("LOG_LEVEL", "DEBUG")
            }
            else if (logger.isEnabled(LogLevel.INFO)) {
                environment("LOG_LEVEL", "INFO")
            }
            else {
                environment("LOG_LEVEL", "SEVERE")
            }
            def platform = "vm"
            if (project.hasProperty('platform')) {
                platform = project.getProperties()['platform']
            }
            def testFiles = file("$projectDir/test").listFiles().findAll { it.name.endsWith(".dart") }
            args = ['run', 'test'] + testFiles + ['-p', platform, '--reporter=expanded', '-j', '1']
        }
    }
}
// We need to ensure that dart tests are run before stopping the test MatsSocketServer.
rootProject.stopMatsSocketTestServer.mustRunAfter(test)

// 'pub publish --dry-run'
task publishDryRun(dependsOn:  updateDartDependencies) {
    doLast {
        exec {
            def os = org.gradle.internal.os.OperatingSystem.current();
            executable os.getScriptName("$dartSdkPath/bin/dart")
            workingDir projectDir
            args = ['publish', '--dry-run']
        }
    }
}

// 'pub publish --force'
task publish(dependsOn:  updateDartDependencies) {
    doLast {
        exec {
            def os = org.gradle.internal.os.OperatingSystem.current();
            executable os.getScriptName("$dartSdkPath/bin/dart")
            workingDir projectDir
            args = ['publish', '--force']
        }
    }
}


// Package up the Dart library
task archiveLib(type: Zip) {
    from "$projectDir/lib"
    into "mats_socket-${project.version}-dart"
    archiveFileName = "mats_socket-${project.version}-dart.zip"
    destinationDirectory = file("$buildDir/dist")
}

// Include the packaging of the lib into the main build
rootProject.build.dependsOn(archiveLib)

task clean(type: Delete) {
    delete buildDir
}

// "distclean": Clean out the downloaded Dart SDK and dependencies
task distclean(type: Delete, dependsOn: [clean]) {
    delete "$projectDir/dartsdk_download"
    delete "$projectDir/.dart_tool"
    delete "$projectDir/.packages" // Old-style .dart_tool/package_config.json
    delete "$projectDir/pubspec.lock"
    doLast {
        println "NOTICE: Not deleting '~/.pub-cache'"
    }
}
