// MatsSocket-Client-Dart

repositories {
    // Create a custom ivy repository that represents the dart sdk download, so that we
    // can download the SDK using gradles download mechanisms and cache.
    ivy {
        url = "https://storage.googleapis.com/dart-archive/channels/stable/release/"
        patternLayout {
            artifact "[revision]/sdk/[artifact]-[classifier]-release.[ext]"
        }
        metadataSources {
            artifact()
        }
    }
}

configurations {
    dartSdk
}

ext {
    dartSdkVersion = '3.8.1'
    dartDownloadTemp = file("$projectDir/dartsdk_download-temp")
    dartDownload = file("$projectDir/dartsdk_download")
    dartSdkPath = file("$dartDownload/dart-sdk")
}

dependencies {
    def os = org.gradle.internal.os.OperatingSystem.current();
    if (os.isWindows()) {
        dartSdk "com.google.dart:dartsdk:${dartSdkVersion}:windows-x64@zip"
    }
    else if (os.isMacOsX()) {
        dartSdk "com.google.dart:dartsdk:${dartSdkVersion}:macos-x64@zip"
    }
    else if (os.isLinux()) {
        dartSdk "com.google.dart:dartsdk:${dartSdkVersion}:linux-x64@zip"
    }
    else {
        throw new GradleException("Unsupported OS for Dart SDK: ${os.toString()}")
    }
}

// Small helper to run the Dart executable with common configuration.
def dartExec(Closure body) {
    services.get(ExecOperations).exec { ExecSpec spec ->
        def os = org.gradle.internal.os.OperatingSystem.current()
        spec.executable os.getScriptName("$dartSdkPath/bin/dart")
        spec.workingDir projectDir
        body.delegate = spec
        body.resolveStrategy = Closure.DELEGATE_FIRST
        body()
    }
}
def dartExec(Object... cmd) {
    dartExec {
        args cmd
    }
}

tasks.register('updateDartDependencies') {
    doLast {
        println "Pre-cleaning Dart temp dir '$dartDownloadTemp'"
        delete dartDownloadTemp
        // Fetch the Dart SDK from "custom ivy repo" set up above
        println "Unzipping Dart SDK to temp dir '$dartDownloadTemp'"
        copy {
            from zipTree(configurations.dartSdk.asPath)
            into "$dartDownloadTemp"
        }

        // Move it into place - avoids problem if IntelliJ is set up to use the Dart SDK here ("Text file busy")
        // Note: If on Windows, you'll probably have to find another SDK location for IntelliJ, as it locks the files.
        println "Renaming Dart SDK download to '$dartDownload'"
        dartDownloadTemp.renameTo(dartDownload)

        // Update dart dependencies by executing 'pub get'
        println "Executing 'dart pub get' to resolve and fetch dependencies."
        dartExec 'pub', 'get'
        dartExec '--version' // Just to show which dart version we are using.

        println "All good, cleaning Dart temp dir '$dartDownloadTemp'"
        delete dartDownloadTemp
    }
}

def platformProp = providers.gradleProperty('platform')
tasks.register('test') {
    dependsOn 'updateDartDependencies', ':startMatsSocketTestServer'
    doLast {
        dartExec {
            // :: Setting environment for test run
            environment("MATS_SOCKET_URLS", rootProject.startMatsSocketTestServer.wsUrls.join(","))
            // Checking which log level is enabled to pass on to the tests, so that they log if needed.
            if (logger.isEnabled(LogLevel.DEBUG)) {
                environment("LOG_LEVEL", "DEBUG")
            } else if (logger.isEnabled(LogLevel.INFO)) {
                environment("LOG_LEVEL", "INFO")
            } else {
                environment("LOG_LEVEL", "SEVERE")
            }
            def platform = platformProp.orElse('vm').get()
            def testFiles = file("$projectDir/test").listFiles().findAll { it.name.endsWith(".dart") }
            args = ['run', 'test'] + testFiles + ['-p', platform, '--reporter=expanded', '-j', '1']
        }
    }
}
// We need to ensure that dart tests are run before stopping the test MatsSocketServer.
rootProject.stopMatsSocketTestServer.mustRunAfter(test)

// 'dart publish --dry-run'
tasks.register('publishDryRun') {
    dependsOn updateDartDependencies
    doLast {
        dartExec 'publish', '--dry-run'
    }
}

// 'dart publish --force'
tasks.register('publish') {
    dependsOn updateDartDependencies
    doLast {
        dartExec 'publish', '--force'
    }
}

// Package up the Dart library
tasks.register('archiveLib', Zip) {
    from "$projectDir/lib"
    into "mats_socket-${project.version}-dart"
    archiveFileName = "mats_socket-${project.version}-dart.zip"
    destinationDirectory.set(layout.buildDirectory.dir("dist"))
}

// Include the packaging of the lib into the main build
rootProject.build.dependsOn(archiveLib)

tasks.register('clean', Delete) {
    delete layout.buildDirectory
}

tasks.register('distclean', Delete) {
    dependsOn clean
    delete "$dartDownload"
}
